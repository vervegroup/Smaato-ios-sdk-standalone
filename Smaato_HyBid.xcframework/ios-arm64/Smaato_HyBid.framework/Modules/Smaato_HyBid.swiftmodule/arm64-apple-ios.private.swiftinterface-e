// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Smaato_HyBid
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import ATOM
import AVFoundation
import AdAttributionKit
import AdSupport
import AppTrackingTransparency
import CoreBluetooth
import CoreLocation
import CoreTelephony
import Foundation
import Network
@_exported import Smaato_HyBid
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _AdAttributionKit_StoreKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class HyBidLogger : ObjectiveC.NSObject {
  public static var logLevel: Smaato_HyBid.HyBidLogLevel
  @objc(setLogLevel:) public static func setLogLevel(_ logLevel: Smaato_HyBid.HyBidLogLevel)
  @objc public static func errorLog(fromClass className: Swift.String, fromMethod: Swift.String, withMessage: Swift.String)
  @objc public static func warningLog(fromClass className: Swift.String, fromMethod: Swift.String, withMessage: Swift.String)
  @objc public static func infoLog(fromClass className: Swift.String, fromMethod: Swift.String, withMessage: Swift.String)
  @objc public static func debugLog(fromClass className: Swift.String, fromMethod: Swift.String, withMessage: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidAdAttributionParameter : ObjectiveC.NSObject {
  @objc public static let jwt: Swift.String
  @objc public static let custom_market_place: Swift.String
  @objc public static let reengagement_url: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class HyBidOpenRTBRequestModel : ObjectiveC.NSObject {
  @objc public init(adRequestModel: Smaato_HyBid.PNLiteAdRequestModel, openRTBAdType: Smaato_HyBid.HyBidOpenRTBAdType)
  @objc public func getOpenRTBRequestBody() -> Swift.Dictionary<Swift.String, Any>
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func showCustomAlert(title: Swift.String, message: Swift.String? = nil, style: UIKit.UIAlertController.Style = .alert, firstAction: UIKit.UIAlertAction? = nil, secondAction: UIKit.UIAlertAction? = nil, completionHandler: (() -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidSDKConfig : ObjectiveC.NSObject {
  @objc public static let sharedConfig: Smaato_HyBid.HyBidSDKConfig
  @objc public var test: Swift.Bool
  @objc public var reporting: Swift.Bool
  @objc public var atomEnabled: Swift.Bool
  @objc public var targeting: Smaato_HyBid.HyBidTargetingModel?
  @objc public var appToken: Swift.String?
  @objc public var apiURL: Swift.String {
    @objc get
    @objc set
  }
  @objc public var openRtbApiURL: Swift.String
  @objc public var appID: Swift.String?
  @objc public var customRemoteConfigURL: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidImpressionConstants : ObjectiveC.NSObject {
  @objc public static let PLACEMENT_POSITION_UNKNOWN: Swift.String
  @objc public static let PLACEMENT_POSITION_FULLSCREEN: Swift.String
  @objc public static let EXPANDABLE_DIRECTION_FULLSCREEN: Swift.String
  @objc public static let EXPANDABLE_DIRECTION_RESIZE_MINIMIZE: Swift.String
  @objc public static let VIDEO_PLACEMENT_TYPE_INTERSTITIAL: Swift.String
  @objc public static let VIDEO_PLACEMENT_SUBTYPE_INTERSTITIAL: Swift.String
  @objc public static let VIDEO_PLACEMENT_SUBTYPE_STANDALONE: Swift.String
  @objc public static let VIDEO_PLAYBACK_METHOD_PAGE_LOAD_SOUND_ON: Swift.String
  @objc public static let VIDEO_PLAYBACK_METHOD_PAGE_LOAD_SOUND_OFF: Swift.String
  @objc public static let VIDEO_PLAYBACK_METHOD_ENTER_VIEWPORT_SOUND_ON: Swift.String
  @objc public static let VIDEO_PLAYBACK_METHOD_ENTER_VIEWPORT_SOUND_OFF: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class HyBidMRAIDCloseCardView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public init(dictionary: Foundation.NSDictionary)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @objc deinit
}
extension Smaato_HyBid.HyBidMRAIDCloseCardView : Smaato_HyBid.HyBidContentInfoViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func contentInfoViewWidthNeedsUpdate(_ width: Foundation.NSNumber!)
}
@objc public protocol HyBidReportingDelegate {
  @objc func onEvent(with event: Smaato_HyBid.HyBidReportingEvent)
  @objc func onBeacon(with beacon: Smaato_HyBid.HyBidReportingBeacon)
  @objc func onVASTTracker(with tracker: Smaato_HyBid.HyBidReportingVASTTracker)
}
@_inheritsConvenienceInitializers @objc public class HyBidReportingManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: Smaato_HyBid.HyBidReportingManager
  @objc public var events: [Smaato_HyBid.HyBidReportingEvent]
  @objc weak public var delegate: (any Smaato_HyBid.HyBidReportingDelegate)?
  @objc public var isAtomStarted: Swift.Bool
  @objc public var beacons: [Smaato_HyBid.HyBidReportingBeacon]
  @objc public var vastTrackers: [Smaato_HyBid.HyBidReportingVASTTracker]
  @objc public func reportEvent(for event: Smaato_HyBid.HyBidReportingEvent)
  @objc public func reportEvents(for events: [Smaato_HyBid.HyBidReportingEvent])
  @objc public func clearAllReports()
  @objc public func clearEvents()
  @objc public func addCommonProperties(forAd ad: Smaato_HyBid.HyBidAd?, withRequest request: Smaato_HyBid.HyBidAdRequest?) -> [Swift.String : Swift.String]
  @objc public func reportBeacon(for beacon: Smaato_HyBid.HyBidReportingBeacon)
  @objc public func clearBeacons()
  @objc public func reportVASTTracker(for tracker: Smaato_HyBid.HyBidReportingVASTTracker)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ATOMManager : ObjectiveC.NSObject {
  @objc public class func fireAdSessionEvent(data: Smaato_HyBid.HyBidAdSessionData)
  @objc public class func createAdSessionData(from request: Smaato_HyBid.HyBidAdRequest?, ad: Smaato_HyBid.HyBidAd) -> Smaato_HyBid.HyBidAdSessionData
  @objc public class func reportAdSessionDataSharedEvent(adSessionDict: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidSettings : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc public static let sharedInstance: Smaato_HyBid.HyBidSettings
  @objc public var supportMultipleFidelities: Swift.Bool
  @objc public var advertisingId: Swift.String? {
    @objc get
  }
  @objc public var os: Swift.String {
    @objc get
  }
  @objc public var osVersion: Swift.String {
    @objc get
  }
  @objc public var deviceModel: Swift.String {
    @objc get
  }
  @objc public var deviceModelIdentifier: Swift.String {
    @objc get
  }
  @objc public var deviceMake: Swift.String {
    @objc get
  }
  @objc public var deviceType: Swift.String {
    @objc get
  }
  @objc public var screenHeightInPixelss: Swift.String {
    @objc get
  }
  @objc public var screenWidthInPixels: Swift.String {
    @objc get
  }
  @objc public var pxRatio: Swift.String {
    @objc get
  }
  @objc public var language: Swift.String? {
    @objc get
  }
  @objc public var jsValue: Swift.String {
    @objc get
  }
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public var languageBCP47: Swift.String? {
    @objc get
  }
  @objc public var carrierName: Swift.String? {
    @objc get
  }
  @objc public var carrierMCCMNC: Swift.String? {
    @objc get
  }
  @available(iOS 14.1, *)
  @objc public var connectionType: Swift.String {
    @objc get
  }
  @objc public var deviceWidth: Swift.String {
    @objc get
  }
  @objc public var deviceHeight: Swift.String {
    @objc get
  }
  @objc public var orientation: Swift.String {
    @objc get
  }
  @objc public var deviceSound: Swift.String {
    @objc get
  }
  @objc public var audioVolumePercentage: Foundation.NSNumber {
    @objc get
  }
  @objc public var locale: Swift.String? {
    @objc get
  }
  @objc public var sdkVersion: Swift.String?
  @objc public var appBundleID: Swift.String? {
    @objc get
  }
  @objc public var appVersion: Swift.String? {
    @objc get
  }
  @objc public var isDeviceCharging: Swift.String {
    @objc get
  }
  @objc public var batteryLevel: Swift.String? {
    @objc get
  }
  @objc public var batterySaver: Swift.String {
    @objc get
  }
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc public var identifierForVendor: Swift.String? {
    @objc get
  }
  @objc public var ip: Swift.String? {
    @objc get
  }
  @objc public var appTrackingTransparency: Foundation.NSNumber? {
    @objc get
  }
  @objc public var isDarkModeEnabled: Swift.String? {
    @objc get
  }
  @objc public var isAirplaneModeEnabled: Swift.String? {
    @objc get
  }
  @objc public var hasSIM: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
public typealias ReportingKey = Swift.String
@objc public class HyBidReportingEvent : ObjectiveC.NSObject {
  @objc public var properties: [Smaato_HyBid.ReportingKey : Any]?
  @objc public var eventType: Swift.String
  @objc public init(with eventType: Swift.String, adFormat: Swift.String? = nil, properties: [Smaato_HyBid.ReportingKey : Any]? = nil)
  @objc public init(with eventType: Swift.String, errorMessage: Swift.String? = nil, properties: [Smaato_HyBid.ReportingKey : Any]? = nil)
  public func propertiesValue() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidSKAdNetworkViewController : ObjectiveC.NSObject {
  @objc public static let shared: Smaato_HyBid.HyBidSKAdNetworkViewController
  public var isStoreKitViewPresented: Swift.Bool {
    get
    set
  }
  @objc public var avoidAutoStoreKitPresentationAfterReplay: Swift.Bool
  @objc public func presentStoreKitView(productParameters: Swift.Dictionary<Swift.String, Any>, adFormat: Swift.String, isAutoStoreKitView: Swift.Bool, ad: Smaato_HyBid.HyBidAd, rootViewController: UIKit.UIViewController)
  @objc public func presentStoreKitView(productParameters: Swift.Dictionary<Swift.String, Any>, adFormat: Swift.String, isAutoStoreKitView: Swift.Bool, ad: Smaato_HyBid.HyBidAd)
  @objc public func isSKProductViewControllerPresented() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Smaato_HyBid.HyBidSKAdNetworkViewController : StoreKit.SKStoreProductViewControllerDelegate {
  @objc dynamic public func productViewControllerDidFinish(_ viewController: StoreKit.SKStoreProductViewController)
}
extension StoreKit.SKStoreProductViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
}
@objc public enum HyBidOnTopOfType : Swift.Int, Swift.CaseIterable {
  case UNKNOWN_TOP_EVENT
  case DISPLAY
  case COMPANION_AD
  case CUSTOM_ENDCARD
  public func stringValue() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Smaato_HyBid.HyBidOnTopOfType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Smaato_HyBid.HyBidOnTopOfType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class HyBidSkipOffset : ObjectiveC.NSObject {
  @objc public static let DEFAULT_VIDEO_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_HTML_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_REWARDED_HTML_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_SKIP_OFFSET_WITHOUT_ENDCARD: Swift.Int
  @objc public static let DEFAULT_END_CARD_CLOSE_OFFSET: Swift.Int
  @objc public static let DEFAULT_END_CARD_CLOSE_MAX_OFFSET: Swift.Int
  @objc public static let DEFAULT_REWARDED_VIDEO_MAX_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_INTERSTITIAL_VIDEO_MAX_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_REWARDED_HTML_MAX_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_INTERSTITIAL_HTML_MAX_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_NATIVE_CLOSE_BUTTON_OFFSET: Swift.Int
  @objc public static let DEFAULT_PC_VIDEO_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_PC_VIDEO_MAX_SKIP_OFFSET_COMPANION: Swift.Int
  @objc public static let DEFAULT_PC_VIDEO_MAX_SKIP_OFFSET_NON_COMPANION: Swift.Int
  @objc public static let DEFAULT_PC_INTERSTITIAL_SKIP_OFFSET: Swift.Int
  @objc public static let DEFAULT_PC_INTERSTITIAL_MAX_SKIP_OFFSET: Swift.Int
  @objc public var offset: Foundation.NSNumber?
  @objc public var isCustom: Swift.Bool
  @objc public var style: Foundation.NSNumber
  @objc public init(offset: Foundation.NSNumber?, isCustom: Swift.Bool)
  @objc public init(offset: Foundation.NSNumber?, isCustom: Swift.Bool, style: Foundation.NSNumber = 0)
  @objc public func configure(offset: Foundation.NSNumber?, isCustom: Swift.Bool, style: Foundation.NSNumber = 0)
  @objc deinit
}
@objc public class HyBidAdAttributionCustomClickAdsWrapper : ObjectiveC.NSObject {
  @objc public init(ad: Smaato_HyBid.HyBidAd, adFormat: Swift.String? = nil)
  @objc public func startImpression(adView: UIKit.UIView?)
  @objc public func adHasCustomMarketPlace() -> Swift.Bool
  @objc public func handlingCustomMarketPlace(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidSessionManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: Smaato_HyBid.HyBidSessionManager
  @objc public var impressionCounter: [Swift.String : Swift.Int]
  @objc public var sessionDuration: Swift.String
  @objc public var safeImpressionCounter: [Swift.String : Swift.Int] {
    @objc get
  }
  @objc public func setStartSession()
  @objc public func updateSession(zoneID: Swift.String)
  @objc public func incrementImpressionCounter(zoneID: Swift.String)
  @objc public func sessionDuration(zoneID: Swift.String)
  @objc public func setAgeOfAppSinceCreated()
  @objc public func getAgeOfApp() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidConsentConfig : ObjectiveC.NSObject {
  @objc public static let sharedConfig: Smaato_HyBid.HyBidConsentConfig
  @objc public var coppa: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidTargetingModel : ObjectiveC.NSObject {
  @objc public var age: Foundation.NSNumber?
  @objc public var interests: [Swift.String]
  @objc public var gender: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidVASTEventBeaconsManager : ObjectiveC.NSObject {
  @objc public static let shared: Smaato_HyBid.HyBidVASTEventBeaconsManager
  @objc public func reportVASTEvent(type: Swift.String, ad: Smaato_HyBid.HyBidAd?)
  @objc public func reportVASTEvent(type: Swift.String, ad: Smaato_HyBid.HyBidAd?, errorCode: Swift.Int)
  @objc public func reportVASTEvent(type: Swift.String, ad: Smaato_HyBid.HyBidAd?, onTopOf: Smaato_HyBid.HyBidOnTopOfType)
  @objc public func reportVASTEvent(type: Swift.String, ad: Smaato_HyBid.HyBidAd?, onTopOf: Smaato_HyBid.HyBidOnTopOfType, errorCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidInternalWebBrowser : ObjectiveC.NSObject {
  @objc public static let shared: Smaato_HyBid.HyBidInternalWebBrowser
  @objc public var isInternalBrowserBeingPresented: Swift.Bool
  @objc public func navigateToURL(_ url: Swift.String)
  @objc public func webBrowserNavigationBehaviourFromString(_ value: Swift.String?) -> Smaato_HyBid.HyBidWebBrowserNavigation
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidLandingBehaviour : ObjectiveC.NSObject {
  @objc public enum HyBidLandingBehaviourType : Swift.Int32 {
    case instantCloseButton
    case noCountdown
    case countdown
    case unknown
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc public func convertString(value: Swift.String?) -> Smaato_HyBid.HyBidLandingBehaviour.HyBidLandingBehaviourType
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidConstants : ObjectiveC.NSObject {
  @objc public static let HYBID_SDK_NAME: Swift.String
  @objc public static let HYBID_OMSDK_VERSION: Swift.String
  @objc public static let HYBID_SDK_VERSION: Swift.String
  @objc public static let SMAATO_SDK_VERSION: Swift.String
  @objc public static let HYBID_OMSDK_IDENTIFIER: Swift.String
  @objc public static let SMAATO_OMSDK_IDENTIFIER: Swift.String
  @objc public static let SMAATO_OMSDK_VERSION: Swift.String
  @objc public static let RENDERING_SUCCESS: Swift.String
  @objc public static let AD_SESSION_DATA: Swift.String
  @objc public static let PERCENT_VISIBLE: Swift.String
  @objc public static var mraidExpand: Swift.Bool
  @objc public static var showEndCard: Swift.Bool
  @objc public static var showCustomEndCard: Swift.Bool
  @objc public static var customEndCardInputValue: Swift.String
  @objc public static var customEndcardDisplay: Smaato_HyBid.HyBidCustomEndcardDisplayBehaviour
  @objc public static var interstitialCloseOnFinish: Swift.Bool
  @objc public static var rewardedCloseOnFinish: Swift.Bool
  @objc public static var rewardedHtmlSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var rewardedVideoSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var interstitialHtmlSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var pcInterstitialHtmlSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var videoSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var pcVideoSkipOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var interstitialActionBehaviour: Smaato_HyBid.HyBidInterstitialActionBehaviour
  @objc public static var endCardCloseOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var endCardCloseMaxOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var nativeCloseButtonOffset: Smaato_HyBid.HyBidSkipOffset
  @objc public static var audioStatus: Smaato_HyBid.HyBidAudioStatus
  @objc public static var creativeAutoStorekitEnabled: Swift.Bool
  @objc public static var sdkAutoStorekitEnabled: Swift.Bool
  @objc public static var skAdNetworkModelInputValue: Foundation.NSDictionary
  @objc public static var itunesIdValue: Swift.String
  @objc public static var customCTAInputValue: Swift.String
  @objc public static var customBundleId: Swift.String
  @objc public static var iconSizeReducedInputValue: Swift.Bool
  @objc public static var navigationModeInputValue: Swift.String
  @objc public static var landingPageInputValue: Swift.Bool
  @objc public static var ctaSizeTypeInputValue: Swift.String
  @objc public static var ctaLocationTypeInputValue: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidAAKNetworkRequestModel : ObjectiveC.NSObject {
  @objc public func getAAKNetworkIDsString() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class HyBidVASTTracker : ObjectiveC.NSObject {
  @objc final public let type: Swift.String
  @objc final public let url: Swift.String
  @objc final public let beaconName: Swift.String?
  public static var safeTriggeredTrackers: [Smaato_HyBid.HyBidVASTTracker] {
    get
  }
  @objc public init(type: Swift.String, url: Swift.String, beaconName: Swift.String? = nil)
  @objc public func shouldBeTriggered() -> Swift.Bool
  @objc public func addToTriggeredTrackersList()
  @objc public static func cleanTriggeredTrackersList()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class HyBidCustomCTAView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public init(ad: Smaato_HyBid.HyBidAd, viewController: UIKit.UIViewController, delegate: any Smaato_HyBid.HyBidCustomCTAViewDelegate, adFormat: Swift.String)
  @objc deinit
}
extension Smaato_HyBid.HyBidCustomCTAView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func presentCustomCTAWithDelay()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeCustomCTA()
  @objc(changeDelegateFor:) @_Concurrency.MainActor @preconcurrency dynamic public func changeDelegate(delegate: any Smaato_HyBid.HyBidCustomCTAViewDelegate)
  @objc @_Concurrency.MainActor @preconcurrency public static func isCustomCTAValid(ad: Smaato_HyBid.HyBidAd) -> Swift.Bool
}
extension Smaato_HyBid.HyBidCustomCTAView : Smaato_HyBid.HyBidInterruptionDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adHasFocus()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adHasNoFocus()
}
@objc public protocol HyBidInterstitialAdDelegate {
  @objc func interstitialDidLoad()
  @objc func interstitialDidFailWithError(_ error: (any Swift.Error)!)
  @objc func interstitialDidTrackImpression()
  @objc func interstitialDidTrackClick()
  @objc func interstitialDidDismiss()
}
@_inheritsConvenienceInitializers @objc public class HyBidInterstitialAd : ObjectiveC.NSObject {
  @objc public var ad: Smaato_HyBid.HyBidAd?
  @objc public var isReady: Swift.Bool
  @objc public var isMediation: Swift.Bool
  @objc public var isAutoCacheOnLoad: Swift.Bool {
    @objc get
    @objc set
  }
  @objc(initWithDelegate:) convenience public init(delegate: any Smaato_HyBid.HyBidInterstitialAdDelegate)
  @objc(initWithZoneID:andWithDelegate:) convenience public init(zoneID: Swift.String?, andWith delegate: any Smaato_HyBid.HyBidInterstitialAdDelegate)
  @objc(initWithZoneID:withAppToken:andWithDelegate:) convenience public init(zoneID: Swift.String?, withAppToken appToken: Swift.String?, andWith delegate: any Smaato_HyBid.HyBidInterstitialAdDelegate)
  @objc public func setOpenRTBAdType(adFormat: Smaato_HyBid.HyBidOpenRTBAdType)
  @objc public func load()
  @objc public func loadExchangeAd()
  @objc public func prepare()
  @objc(setMediationVendor:) public func setMediationVendor(with mediationVendor: Swift.String)
  @objc(prepareAdWithContent:) public func prepareAdWithContent(adContent: Swift.String)
  @objc(prepareAdWithAdReponse:) public func prepareAdWithAdReponse(adReponse: Swift.String)
  @objc(prepareExchangeAdWithAdReponse:) public func prepareExchangeAdWithAdReponse(adReponse: Swift.String)
  @objc(prepareVideoTagFrom:) public func prepareVideoTag(from url: Swift.String)
  @objc(prepareCustomMarkupFrom:) public func prepareCustomMarkupFrom(_ markup: Swift.String)
  @objc public func show()
  @objc(showFromViewController:) public func show(from viewController: UIKit.UIViewController)
  @objc public func renderAd(ad: Smaato_HyBid.HyBidAd)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidInterruptionHandler : ObjectiveC.NSObject {
  @objc public static let shared: Smaato_HyBid.HyBidInterruptionHandler
  @objc weak public var delegate: (any Smaato_HyBid.HyBidInterruptionDelegate)?
  @objc weak public var overlappingElementDelegate: (any Smaato_HyBid.HyBidInterruptionDelegate)?
  @objc weak public var feedbackViewDelegate: (any Smaato_HyBid.HyBidAdFeedbackViewDelegate)?
  @objc override dynamic public init()
  @objc public func hasOnlyAppLifeCycleInterruption() -> Swift.Bool
  @objc deinit
}
extension Smaato_HyBid.HyBidInterruptionHandler {
  @objc dynamic public func vastEndCardWillShow()
  @objc dynamic public func vastCustomEndCardWillShow()
}
extension Smaato_HyBid.HyBidInterruptionHandler {
  public func productViewControllerIsReadyToShow()
  public func productViewControllerWillShow()
  public func productViewControllerDidShow(isAutoStoreKitView: Swift.Bool, adFormat: Swift.String)
  public func productViewControllerDidFinish()
  @objc dynamic public func productViewControllerDidFail(error: any Swift.Error)
}
extension Smaato_HyBid.HyBidInterruptionHandler : Smaato_HyBid.HyBidAdFeedbackViewDelegate {
  @objc dynamic public func adFeedbackViewDidLoad()
  @objc dynamic public func adFeedbackViewWillShow()
  @objc dynamic public func adFeedbackViewDidShow()
  @objc dynamic public func adFeedbackViewDidFailWithError(_ error: any Swift.Error)
  @objc dynamic public func adFeedbackViewDidDismiss()
}
extension Smaato_HyBid.HyBidInterruptionHandler {
  public func internalWebBrowserDidShow()
  public func internalWebBrowserDidDismiss()
}
@objc public protocol HyBidInterruptionDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adHasNoFocus()
  @objc optional func adHasFocus()
  @objc optional func vastEndCardWillShow()
  @objc optional func vastCustomEndCardWillShow()
  @objc optional func willEnterForeground()
  @objc optional func feedbackViewWillShow()
  @objc optional func feedbackViewDidDismiss()
  @objc optional func productViewControllerIsReadyToShow()
  @objc optional func productViewControllerWillShow()
  @objc optional func productViewControllerDidShow()
  @objc optional func productViewControllerDidFail(error: any Swift.Error)
  @objc optional func productViewControllerDidFinish()
  @objc optional func internalWebBrowserDidShow()
}
@objc public protocol HyBidRewardedAdDelegate {
  @objc func rewardedDidLoad()
  @objc func rewardedDidFailWithError(_ error: (any Swift.Error)!)
  @objc func rewardedDidTrackImpression()
  @objc func rewardedDidTrackClick()
  @objc func rewardedDidDismiss()
  @objc func onReward()
}
@_inheritsConvenienceInitializers @objc public class HyBidRewardedAd : ObjectiveC.NSObject {
  @objc public var ad: Smaato_HyBid.HyBidAd?
  @objc public var isReady: Swift.Bool
  @objc public var isMediation: Swift.Bool
  @objc public var isAutoCacheOnLoad: Swift.Bool {
    @objc get
    @objc set
  }
  @objc(initWithDelegate:) convenience public init(delegate: any Smaato_HyBid.HyBidRewardedAdDelegate)
  @objc(initWithZoneID:andWithDelegate:) convenience public init(zoneID: Swift.String?, andWith delegate: any Smaato_HyBid.HyBidRewardedAdDelegate)
  @objc(initWithZoneID:withAppToken:andWithDelegate:) convenience public init(zoneID: Swift.String?, withAppToken appToken: Swift.String?, andWith delegate: any Smaato_HyBid.HyBidRewardedAdDelegate)
  @objc public func load()
  @objc public func loadExchangeAd()
  @objc public func setOpenRTBAdType(adFormat: Smaato_HyBid.HyBidOpenRTBAdType)
  @objc public func prepare()
  @objc(setMediationVendor:) public func setMediationVendor(with mediationVendor: Swift.String)
  @objc(prepareCustomMarkupFrom:) public func prepareCustomMarkupFrom(_ markup: Swift.String)
  @objc(prepareAdWithContent:) public func prepareAdWithContent(adContent: Swift.String)
  @objc(prepareExchangeAdWithAdReponse:) public func prepareExchangeAdWithAdReponse(adReponse: Swift.String)
  @objc(prepareAdWithAdReponse:) public func prepareAdWithAdReponse(adReponse: Swift.String)
  @objc public func show()
  @objc(showFromViewController:) public func show(from viewController: UIKit.UIViewController)
  @objc public func renderAd(ad: Smaato_HyBid.HyBidAd)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidMRAIDCommand : ObjectiveC.NSObject {
  @objc public enum HyBidMRAIDCommandType : Swift.Int32 {
    case mraid
    case verveAdExperience
    case consoleLog
    case unknown
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public func commandTypeWith(text: Swift.String) -> Smaato_HyBid.HyBidMRAIDCommand.HyBidMRAIDCommandType
  @objc deinit
}
@objc public class HyBidCTAData : ObjectiveC.NSObject {
  @objc final public let size: Smaato_HyBid.HyBidCTASize
  @objc final public let location: Smaato_HyBid.HyBidCTALocation
  @objc final public let cornerRadius: CoreFoundation.CGFloat
  @objc public init(size: Smaato_HyBid.HyBidCTASize, location: Smaato_HyBid.HyBidCTALocation)
  @objc public static func sizeFromValue(_ value: Any) -> Smaato_HyBid.HyBidCTASize
  @objc public static func locationFromValue(_ value: Any) -> Smaato_HyBid.HyBidCTALocation
  @objc public func sizeValue() -> CoreFoundation.CGSize
  @objc public func fontSize() -> CoreFoundation.CGFloat
  @objc public func ctaImageWithFixedSize(image: UIKit.UIImage) -> UIKit.UIImage
  @objc public func locationBottomConstraint() -> CoreFoundation.CGFloat
  @objc public func locationLeadingConstraint() -> CoreFoundation.CGFloat
  @objc public func accessibilityIdentifierString() -> Swift.String
  @objc deinit
}
@objc public enum HyBidCTASize : Swift.Int32 {
  @objc(HyBidCTASizeDefault) case defaultSize
  case medium
  case large
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum HyBidCTALocation : Swift.Int32 {
  @objc(HyBidCTALocationDefault) case defaultLocation
  case bottom_down
  case bottom_up
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public class HyBidReportingBeacon : ObjectiveC.NSObject {
  @objc public var properties: [Smaato_HyBid.ReportingKey : Any]?
  @objc public var beaconType: Swift.String
  @objc public init(with beaconType: Swift.String, properties: [Smaato_HyBid.ReportingKey : Any]? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidGDPR : ObjectiveC.NSObject {
  @objc(HyBidGDPRk) public enum HyBidGDPRKeys : Swift.Int, Swift.CaseIterable {
    case CCPAPrivacyKey
    case GDPRConsentKey
    case GDPRAppliesKey
    case CCPAPublicPrivacyKey
    case GDPRPublicConsentKey
    case GDPRPublicConsentV2Key
    case GPPPublicString
    case GPPPublicID
    case GPPString
    case GPPID
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc(stringValueForKey:) public static func stringValue(key: Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys) -> Swift.String
  @objc public static func allGDPRKeys() -> [Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidCustomCTATracking : ObjectiveC.NSObject {
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public init(ad: Smaato_HyBid.HyBidAd)
  @objc public func impressionBeacons() -> Swift.Array<Smaato_HyBid.HyBidDataModel>
  @objc public func clickBeacons() -> Swift.Array<Smaato_HyBid.HyBidDataModel>
  @objc public func endCardClickBeacons() -> Swift.Array<Smaato_HyBid.HyBidDataModel>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidLocationConfig : ObjectiveC.NSObject {
  @objc public static let sharedConfig: Smaato_HyBid.HyBidLocationConfig
  @objc public var locationTrackingEnabled: Swift.Bool {
    @objc get
    @objc set(enabled)
  }
  @objc public var locationUpdatesEnabled: Swift.Bool {
    @objc get
    @objc set(enabled)
  }
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public func changeTextFont(text: Swift.String, font: UIKit.UIFont)
}
@_inheritsConvenienceInitializers @objc public class HyBidAppImpressionWrapper : ObjectiveC.NSObject {
  @available(iOS 17.4, *)
  @objc public static func createWithAd(_ ad: Smaato_HyBid.HyBidAd?, adFormat: Swift.String) async -> Smaato_HyBid.HyBidAppImpressionWrapper?
  @objc public func createWithAd(_ ad: Smaato_HyBid.HyBidAd?, adFormat: Swift.String, completion: @escaping (Smaato_HyBid.HyBidAppImpressionWrapper?) -> Swift.Void)
  @objc public func beginView(forAdFormat adFormat: Swift.String, completion: @escaping @convention(block) (Swift.Bool) -> Swift.Void)
  @objc public func endView(forAdFormat adFormat: Swift.String, completion: @escaping @convention(block) (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 17.4, *)
@objc public class HyBidAdAttributionSKOverlayManager : ObjectiveC.NSObject {
  @objc public func getAppConfiguration(appIdentifier: Swift.String?, position: StoreKit.SKOverlay.Position, userDismissible: Swift.Bool, ad: Smaato_HyBid.HyBidAd, adFormat: Swift.String) async -> StoreKit.SKOverlay.AppConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidAdSessionData : ObjectiveC.NSObject {
  @objc public var creativeId: Swift.String?
  @objc public var campaignId: Swift.String?
  @objc public var bidPrice: Swift.String?
  @objc public var adFormat: Swift.String?
  @objc public var renderingStatus: Swift.String?
  @objc public var viewability: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyBidViewbilityConfig : ObjectiveC.NSObject {
  @objc public static let sharedConfig: Smaato_HyBid.HyBidViewbilityConfig
  @objc public var impressionTrackerMethod: Smaato_HyBid.HyBidImpressionTrackerMethod
  @objc public var minVisibleTime: Swift.Int
  @objc public var minVisiblePercent: Swift.Double
  @objc deinit
}
@objc public class HyBidReportingVASTTracker : ObjectiveC.NSObject {
  @objc public var properties: [Smaato_HyBid.ReportingKey : Any]?
  @objc public var trackerType: Swift.String
  @objc public init(with trackerType: Swift.String, properties: [Smaato_HyBid.ReportingKey : Any]? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyBidReportingProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingCommon) public class Common : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let AD_FORMAT: Swift.String
  @objc public static let AD_SIZE: Swift.String
  @objc public static let CATEGORY_ID: Swift.String
  @objc public static let CAMPAIGN_ID: Swift.String
  @objc public static let EVENT_TYPE: Swift.String
  @objc public static let CREATIVE_TYPE: Swift.String
  @objc public static let TIMESTAMP: Swift.String
  @objc public static let APPTOKEN: Swift.String
  @objc public static let ZONE_ID: Swift.String
  @objc public static let INTEGRATION_TYPE: Swift.String
  @objc public static let KEY_MEDIATION_VENDOR: Swift.String
  @objc public static let TIME_TO_LOAD: Swift.String
  @objc public static let AD_TYPE: Swift.String
  @objc public static let CACHE_TIME: Swift.String
  @objc public static let AD_REQUEST: Swift.String
  @objc public static let AD_RESPONSE: Swift.String
  @objc public static let RESPONSE_TIME: Swift.String
  @objc public static let REQUEST_TYPE: Swift.String
  @objc public static let RENDER_TIME: Swift.String
  @objc public static let AD_POSITION: Swift.String
  @objc public static let ERROR_CODE: Swift.String
  @objc public static let ERROR_MESSAGE: Swift.String
  @objc public static let CREATIVE: Swift.String
  @objc public static let HAS_END_CARD: Swift.String
  @objc public static let LAST_SESSION_TIMESTAMP: Swift.String
  @objc public static let IMPRESSION_SESSION_COUNT: Swift.String
  @objc public static let START_SESSION_TIMESTAMP: Swift.String
  @objc public static let SESSION_DURATION: Swift.String
  @objc public static let AGE_OF_APP: Swift.String
  @objc public static let BEACON_TYPE: Swift.String
  @objc public static let VAST_TRACKER_TYPE: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingEventType) public class EventType : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let REQUEST: Swift.String
  @objc public static let IMPRESSION: Swift.String
  @objc public static let OMID_IMPRESSION: Swift.String
  @objc public static let CLICK: Swift.String
  @objc public static let ERROR: Swift.String
  @objc public static let INTERSTITIAL_CLOSED: Swift.String
  @objc public static let REWARDED_CLOSED: Swift.String
  @objc public static let VIDEO_STARTED: Swift.String
  @objc public static let VIDEO_DISMISSED: Swift.String
  @objc public static let VIDEO_MUTE: Swift.String
  @objc public static let VIDEO_UNMUTE: Swift.String
  @objc public static let AD_SESSION_INITIALIZED: Swift.String
  @objc public static let AD_SESSION_LOADED: Swift.String
  @objc public static let AD_SESSION_STARTED: Swift.String
  @objc public static let AD_SESSION_STOPPED: Swift.String
  @objc public static let VIDEO_AD_FIRST_QUARTILE: Swift.String
  @objc public static let VIDEO_AD_MIDPOINT: Swift.String
  @objc public static let VIDEO_AD_THIRD_QUARTILE: Swift.String
  @objc public static let VIDEO_AD_COMPLETE: Swift.String
  @objc public static let VIDEO_AD_PAUSE: Swift.String
  @objc public static let VIDEO_AD_RESUME: Swift.String
  @objc public static let VIDEO_AD_BUFFER_START: Swift.String
  @objc public static let VIDEO_AD_BUFFER_FINISH: Swift.String
  @objc public static let VIDEO_AD_VOLUME_CHANGE: Swift.String
  @objc public static let VIDEO_AD_SKIPPED: Swift.String
  @objc public static let VIDEO_AD_CLICKED: Swift.String
  @objc public static let LOAD: Swift.String
  @objc public static let LOAD_FAIL: Swift.String
  @objc public static let SHOW: Swift.String
  @objc public static let REPLAY: Swift.String
  @objc public static let CACHE: Swift.String
  @objc public static let RESPONSE: Swift.String
  @objc public static let RENDER: Swift.String
  @objc public static let RENDER_ERROR: Swift.String
  @objc public static let COMPANION_VIEW: Swift.String
  @objc public static let REWARD: Swift.String
  @objc public static let SESSION_REPORT_INFO: Swift.String
  @objc public static let CUSTOM_ENDCARD_IMPRESSION: Swift.String
  @objc public static let CUSTOM_ENDCARD_IMPRESSION_ERROR: Swift.String
  @objc public static let DEFAULT_ENDCARD_SKIP: Swift.String
  @objc public static let DEFAULT_ENDCARD_CLOSE: Swift.String
  @objc public static let DEFAULT_ENDCARD_IMPRESSION: Swift.String
  @objc public static let DEFAULT_ENDCARD_IMPRESSION_ERROR: Swift.String
  @objc public static let DEFAULT_ENDCARD_CLICK: Swift.String
  @objc public static let CUSTOM_ENDCARD_CLOSE: Swift.String
  @objc public static let CUSTOM_ENDCARD_CLICK: Swift.String
  @objc public static let ATOM_ACTIVATED: Swift.String
  @objc public static let ATOM_DEACTIVATED: Swift.String
  @objc public static let ATOM_ACTIVATED_RECEIVED: Swift.String
  @objc public static let ATOM_DEACTIVATED_RECEIVED: Swift.String
  @objc public static let CUSTOM_CTA_IMPRESSION: Swift.String
  @objc public static let CUSTOM_CTA_CLICK: Swift.String
  @objc public static let CUSTOM_CTA_ENDCARD_CLICK: Swift.String
  @objc public static let SKOVERLAY_IMPRESSION: Swift.String
  @objc public static let SKOVERLAY_IMPRESSION_ERROR: Swift.String
  @objc public static let STOREKIT_PRODUCT_VIEW_DISMISS: Swift.String
  @objc public static let STOREKIT_AUTOMATIC_CLICK: Swift.String
  @objc public static let STOREKIT_AUTOMATIC_DEFAULT_ENDCARD_CLICK: Swift.String
  @objc public static let STOREKIT_AUTOMATIC_CUSTOM_ENDCARD_CLICK: Swift.String
  @objc public static let SKOVERLAY_AUTOMATIC_CLICK: Swift.String
  @objc public static let SKOVERLAY_AUTOMATIC_DEFAULT_ENDCARD_CLICK: Swift.String
  @objc public static let SKOVERLAY_AUTOMATIC_CUSTOM_ENDCARD_CLICK: Swift.String
  @objc public static let AUTO_STORE_KIT_IMPRESSION: Swift.String
  @objc public static let AUTO_STORE_KIT_IMPRESSION_ERROR: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_AD_TYPE_MACRO: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION_ERROR: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_HANDLE_TAP: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_HANDLE_TAP_ERROR: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION_BEGIN_VIEW: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION_BEGIN_VIEW_ERROR: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION_END_VIEW: Swift.String
  @objc public static let AD_ATTRIBUTION_KIT_APP_IMPRESSION_END_VIEW_ERROR: Swift.String
  @objc public static let AD_SESSION_DATA_SHARED_TO_ATOM: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingCreativeType) public class CreativeType : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let STANDARD: Swift.String
  @objc public static let VIDEO: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingAdFormat) public class AdFormat : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let NATIVE: Swift.String
  @objc public static let BANNER: Swift.String
  @objc public static let FULLSCREEN: Swift.String
  @objc public static let REWARDED: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingVASTBeacon) public class VASTBeacon : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let BEACONS: Swift.String
  @objc public static let ONTOPOF: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingBeaconType) public class BeaconType : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let CLICK: Swift.String
  @objc public static let IMPRESSION: Swift.String
  @objc public static let CUSTOM_ENDCARD_IMPRESSION: Swift.String
  @objc public static let CUSTOM_ENDCARD_CLICK: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HyBidReportingVASTTrackerType) public class VASTTrackerType : Smaato_HyBid.HyBidReportingProperties {
  @objc public static let IMPRESSION: Swift.String
  @objc public static let COMPANION_CLICK_THROUGH: Swift.String
  @objc public static let CLICK_TRACKING: Swift.String
  @objc public static let PROGRESS: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HyBidURLRedirectorDelegate {
  @objc func onURLRedirectorStart(url: Swift.String)
  @objc func onURLRedirectorRedirect(url: Swift.String)
  @objc func onURLRedirectorFinish(url: Swift.String)
  @objc func onURLRedirectorFail(url: Swift.String, withError error: any Swift.Error)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HyBidURLRedirector : ObjectiveC.NSObject, Foundation.URLSessionTaskDelegate, Foundation.URLSessionDataDelegate {
  @objc weak public var delegate: (any Smaato_HyBid.HyBidURLRedirectorDelegate)?
  @objc public var userAgent: Swift.String?
  @objc public func drill(url: Swift.String, skanModel: Smaato_HyBid.HyBidSkAdNetworkModel?)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc override dynamic public init()
  @objc deinit
}
extension Smaato_HyBid.HyBidOnTopOfType : Swift.Equatable {}
extension Smaato_HyBid.HyBidOnTopOfType : Swift.Hashable {}
extension Smaato_HyBid.HyBidOnTopOfType : Swift.RawRepresentable {}
extension Smaato_HyBid.HyBidLandingBehaviour.HyBidLandingBehaviourType : Swift.Equatable {}
extension Smaato_HyBid.HyBidLandingBehaviour.HyBidLandingBehaviourType : Swift.Hashable {}
extension Smaato_HyBid.HyBidLandingBehaviour.HyBidLandingBehaviourType : Swift.RawRepresentable {}
extension Smaato_HyBid.HyBidMRAIDCommand.HyBidMRAIDCommandType : Swift.Equatable {}
extension Smaato_HyBid.HyBidMRAIDCommand.HyBidMRAIDCommandType : Swift.Hashable {}
extension Smaato_HyBid.HyBidMRAIDCommand.HyBidMRAIDCommandType : Swift.RawRepresentable {}
extension Smaato_HyBid.HyBidCTASize : Swift.Equatable {}
extension Smaato_HyBid.HyBidCTASize : Swift.Hashable {}
extension Smaato_HyBid.HyBidCTASize : Swift.RawRepresentable {}
extension Smaato_HyBid.HyBidCTALocation : Swift.Equatable {}
extension Smaato_HyBid.HyBidCTALocation : Swift.Hashable {}
extension Smaato_HyBid.HyBidCTALocation : Swift.RawRepresentable {}
extension Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys : Swift.Equatable {}
extension Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys : Swift.Hashable {}
extension Smaato_HyBid.HyBidGDPR.HyBidGDPRKeys : Swift.RawRepresentable {}
